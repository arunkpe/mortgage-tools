{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mortgage Tools","text":"<p>A modular, CLI-driven Python library for modeling amortization schedules, refinancing, recasting, and loan comparison \u2014 including support for fixed, ARM, FHA, VA, USDA, and HELOC loans.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Full amortization schedule with principal, interest, PMI/MIP</li> <li>FHA, VA, USDA loan modeling with fees and guarantees</li> <li>Support for ARM and HELOC logic with margin, index, and caps</li> <li>Recast and refinance simulations</li> <li>Effective APR and breakeven analysis</li> <li>CLI interface for automation and scripting</li> <li>Built-in plotting of amortization scenarios</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>git clone https://github.com/arunkpe/mortgage-tools.git\ncd mortgage-tools\npip install -r requirements.txt\n</code></pre> <p>To enable CLI usage from anywhere:</p> <pre><code>export PYTHONPATH=$(pwd):$PYTHONPATH\n</code></pre>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Generate a fixed-rate amortization schedule:</p> <pre><code>python -m cli.cli amortize \\\n  --type fixed \\\n  --balance 400000 \\\n  --rate 6.0 \\\n  --term 360\n</code></pre> <p>Compare two loan scenarios:</p> <pre><code>python -m cli.cli plot \\\n  --scenarios 400000 6.0 360 \\\n  --scenarios 400000 5.5 360 \n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Usage Guide \u2014 CLI commands and examples</li> <li>Loan Types \u2014 Details on fixed, ARM, FHA, VA, USDA, HELOC</li> <li>Scenarios \u2014 Visualizations and tradeoff analysis</li> <li>CLI Reference \u2014 All CLI options in one place</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT License</p>"},{"location":"#contributing","title":"Contributing","text":"<p>PRs and feature suggestions welcome \u2014 please open an issue first if you'd like to discuss a change or enhancement.</p> <pre><code># Lint and check\nblack . &amp;&amp; flake8\n\n# Run CLI with debug logging\npython -m cli.cli amortize --help\n</code></pre>"},{"location":"#author","title":"Author","text":"<p>Built with care by Arun Kumar, inspired by real mortgage modeling use cases in consumer finance and credit decisioning.</p>"},{"location":"amortization/","title":"Amortization Engine","text":"<p>The amortization engine is the core of the loan simulator. It generates month-by-month breakdowns of principal, interest, insurance, and balance.</p>"},{"location":"amortization/#monthly-schedule","title":"Monthly Schedule","text":"<p>For each loan, the amortizer calculates:</p> <ul> <li>Beginning Balance: Outstanding principal at the start of the month</li> <li>Scheduled Payment: Fixed or recalculated payment due</li> <li>Interest Component: Based on daily rate \u00d7 balance</li> <li>Principal Component: Payment minus interest</li> <li>PMI / MIP: Mortgage insurance for FHA/USDA if applicable</li> <li>Ending Balance: Balance after applying principal</li> <li>Date: Computed from the loan start and calendar logic</li> </ul>"},{"location":"amortization/#example-output","title":"Example Output","text":"<pre><code>| Month | Date       | Beginning Balance | Payment | Principal | Interest | PMI/MIP | Ending Balance |\n|-------|------------|------------------:|--------:|----------:|---------:|--------:|----------------:|\n| 1     | 2025-07-01 |          400,000  | 2,398.20|   398.20  | 2,000.00 |     0.00|      399,602.00 |\n</code></pre>"},{"location":"amortization/#compounding-conventions","title":"Compounding Conventions","text":"<p>By default, the amortizer uses <code>30E/360</code> (standard mortgage convention), but other methods like <code>ACT/365</code> may be introduced later.</p>"},{"location":"amortization/#extra-payments","title":"Extra Payments","text":"<p>You can simulate accelerated payoff by specifying:</p> <ul> <li><code>--extra-payment 200</code></li> <li><code>--extra-frequency monthly</code> or <code>biweekly</code></li> </ul> <p>These extra principal contributions reduce the ending balance faster and shorten the loan term.</p>"},{"location":"amortization/#recasting","title":"Recasting","text":"<p>Recasting reduces the monthly payment after a lump-sum principal injection.</p> <pre><code>mortgage amortize --recast-date 2027-01-01 --lump-sum 10000\n</code></pre> <ul> <li>Payment is recomputed over the remaining term</li> <li>Interest savings are realized immediately</li> </ul>"},{"location":"amortization/#refinancing","title":"Refinancing","text":"<p>The engine can simulate a refi mid-stream:</p> <pre><code>mortgage amortize --refinance-date 2027-01-01 --new-rate 5.25 --new-term 300 --refi-fees 2500\n</code></pre> <p>This closes out the current loan and starts a new one with the updated parameters, optionally rolling closing costs into the balance.</p>"},{"location":"amortization/#pmi-mip-usda-fees","title":"PMI, MIP, USDA Fees","text":"<p>Depending on loan type:</p> <ul> <li>FHA: 1.75% upfront MIP added to loan; 0.85% annual MIP paid monthly</li> <li>USDA: 1.00% upfront guarantee fee + 0.35% annual fee</li> <li>VA: 2.25% funding fee added to loan; no monthly PMI</li> </ul> <p>These are automatically modeled by the <code>Loan</code> class at instantiation.</p>"},{"location":"amortization/#visualization","title":"Visualization","text":"<p>To view your amortization curve:</p> <pre><code>mortgage plot --scenarios 400000 6.0 360 --scenarios 400000 5.25 360\n</code></pre> <p>This compares remaining balances over time across scenarios.</p>"},{"location":"amortization/#output","title":"Output","text":"<p>Use <code>--output schedule.csv</code> to export the full amortization schedule to CSV for further analysis.</p> <p>\ud83d\udcce Next: Scenario Comparisons</p>"},{"location":"architecture/","title":"Architecture","text":"<p>This section documents the internal structure and modular design of the MortgageAmortization library.</p>"},{"location":"architecture/#module-overview","title":"Module Overview","text":"<pre><code>MortgageAmortization/\n\u251c\u2500\u2500 cli/                    # CLI entry point (Click-based)\n\u2502   \u2514\u2500\u2500 cli.py\n\u251c\u2500\u2500 mortgage_tools/        # Core modeling logic\n\u2502   \u251c\u2500\u2500 loan.py            # Loan class with support for fixed, FHA, VA, ARM, etc.\n\u2502   \u251c\u2500\u2500 amortizer.py       # Generates amortization schedules\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 utils/                 # Shared utilities\n\u2502   \u251c\u2500\u2500 rates.py           # Loads forward rates (e.g. SOFR)\n\u2502   \u251c\u2500\u2500 plotting.py        # Visualization tools (matplotlib, seaborn)\n\u2502   \u251c\u2500\u2500 metrics.py         # Breakeven, APR, and comparison logic\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 scripts/               # One-off examples or scenario generators\n\u2502   \u2514\u2500\u2500 example.py\n\u251c\u2500\u2500 examples/              # Precomputed scenario outputs (CSV)\n\u251c\u2500\u2500 data/                  # Default input data (e.g., forward rate files)\n\u2502   \u2514\u2500\u2500 macroeconforward.txt\n\u251c\u2500\u2500 docs/                  # Documentation site (mkdocs)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 README.md              # Top-level usage and getting started\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 pyproject.toml         # Project configuration\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"architecture/#design-principles","title":"Design Principles","text":"<ul> <li>Explicit loan types: <code>Loan.from_fha()</code>, <code>Loan.from_va()</code>, <code>Loan.from_arm_type()</code> ensure transparent and validated instantiation.</li> <li>Modular architecture: CLI, plotting, and amortization logic are cleanly decoupled.</li> <li>Vectorized performance: amortization schedules are computed with efficient looped logic; future versions may use NumPy.</li> <li>CLI-first philosophy: Everything callable via <code>python -m cli.cli &lt;command&gt;</code></li> </ul>"},{"location":"architecture/#class-relationships","title":"Class Relationships","text":"<pre><code>Loan              \u2192 configuration + rate assumptions\n \u2193\nLoanAmortizer     \u2192 builds amortization DataFrame\n \u2193\nplotting.py       \u2192 visualizes results\nmetrics.py        \u2192 computes analytics\ncli.py            \u2192 wraps all above via Click\n</code></pre>"},{"location":"architecture/#extendability","title":"Extendability","text":"<p>You can easily:</p> <ul> <li>Add new loan types (<code>Loan.from_new_type(...)</code>)</li> <li>Introduce custom rate sources (modify <code>rates.py</code>)</li> <li>Export more CSV metrics (extend <code>LoanAmortizer</code>)</li> <li>Wire in monthly tax/insurance, DTI logic, or cash-out refinances</li> </ul>"},{"location":"architecture/#planned-improvements","title":"Planned Improvements","text":"<ul> <li>JSON/YAML scenario configuration</li> <li>Interactive web UI (streamlit, fastapi-react)</li> <li>Monte Carlo interest rate scenarios</li> <li>Automated mortgage strategy comparison engine</li> </ul> <p>For CLI usage, see index.md. For modeling assumptions, see loan_types.md.</p>"},{"location":"cli/","title":"Command Line Interface (CLI)","text":"<p>The toolkit includes a powerful CLI for simulating amortization schedules, comparing refinance options, and visualizing scenarios. Install dependencies and run the CLI directly.</p>"},{"location":"cli/#getting-started","title":"Getting Started","text":"<p>Once installed (see README), you can invoke the CLI:</p> <pre><code>python -m cli.cli [command] [options]\n</code></pre> <p>Or install a shortcut entry point:</p> <pre><code>pip install -e .\nmortgage --help\n</code></pre>"},{"location":"cli/#available-commands","title":"Available Commands","text":"Command Purpose <code>amortize</code> Generate amortization schedule <code>compare-apr</code> Compute effective APR with points/fees <code>breakeven</code> Evaluate refinance breakeven month <code>plot</code> Compare multiple loan scenarios visually"},{"location":"cli/#amortization-example","title":"Amortization Example","text":"<pre><code>mortgage amortize \\\n  --type fixed \\\n  --balance 400000 \\\n  --rate 6.0 \\\n  --term 360\n</code></pre> <p>Generates a monthly amortization schedule and shows first 12 rows.</p>"},{"location":"cli/#recast-and-refinance","title":"Recast and Refinance","text":"<p>Add optional flags to simulate real-world events:</p> <pre><code>mortgage amortize \\\n  --type fixed \\\n  --balance 400000 \\\n  --rate 6.0 \\\n  --term 360 \\\n  --extra-payment 300 \\\n  --recast-date 2027-01-01 \\\n  --lump-sum 10000 \\\n  --refinance-date 2029-07-01 \\\n  --new-rate 5.25 \\\n  --new-term 240\n</code></pre>"},{"location":"cli/#effective-apr-comparison","title":"Effective APR Comparison","text":"<pre><code>mortgage compare-apr \\\n  --principal 400000 \\\n  --rate 6.0 \\\n  --term 360 \\\n  --points 1.0 \\\n  --fees 2500\n</code></pre> <p>Returns the effective APR based on net loan proceeds and IRR.</p>"},{"location":"cli/#breakeven-analysis","title":"Breakeven Analysis","text":"<pre><code>mortgage breakeven \\\n  --monthly-savings 180 \\\n  --closing-costs 3500\n</code></pre> <p>Tells you how many months it takes for the refinance savings to break even.</p>"},{"location":"cli/#multi-scenario-comparison","title":"Multi-Scenario Comparison","text":"<pre><code>mortgage plot \\\n  --scenarios 400000 6.0 360 \\\n  --scenarios 400000 5.25 360 \n</code></pre> <p>Visually compares principal and interest paths across loan structures.</p>"},{"location":"cli/#output-options","title":"Output Options","text":"<ul> <li><code>--output FILE.csv</code> saves amortization to disk</li> <li><code>--start-date YYYY-MM-DD</code> controls loan origination date</li> <li><code>--extra-frequency [monthly|biweekly]</code> for recurring extra payments</li> </ul> <p>\ud83d\udcce Next: Examples and Recipes</p>"},{"location":"examples/","title":"Examples and Recipes","text":"<p>This page demonstrates practical usage of the mortgage CLI toolkit across a variety of common scenarios: fixed-rate loans, adjustable-rate structures, FHA/USDA government-backed products, and common financial decisions like recasting or refinancing.</p>"},{"location":"examples/#basic-fixed-rate-loan","title":"Basic Fixed-Rate Loan","text":"<pre><code>mortgage amortize \\\n  --type fixed \\\n  --balance 350000 \\\n  --rate 5.75 \\\n  --term 360\n</code></pre> <p>Generates a standard 30-year amortization schedule with level payments.</p>"},{"location":"examples/#fha-loan-with-mip","title":"FHA Loan With MIP","text":"<pre><code>mortgage amortize \\\n  --type fha \\\n  --balance 275000 \\\n  --rate 6.125 \\\n  --term 360\n</code></pre> <p>Includes upfront and monthly FHA mortgage insurance premiums (MIP).</p>"},{"location":"examples/#loan-with-extra-principal-payments","title":"Loan With Extra Principal Payments","text":"<pre><code>mortgage amortize \\\n  --type fixed \\\n  --balance 450000 \\\n  --rate 6.25 \\\n  --term 360 \\\n  --extra-payment 300 \\\n  --extra-frequency monthly\n</code></pre> <p>Accelerates amortization and reduces total interest.</p>"},{"location":"examples/#simulating-a-recast","title":"Simulating a Recast","text":"<pre><code>mortgage amortize \\\n  --type fixed \\\n  --balance 300000 \\\n  --rate 6.0 \\\n  --term 360 \\\n  --recast-date 2027-06-01 \\\n  --lump-sum 25000\n</code></pre> <p>Applies a lump sum recast 2 years in, reducing monthly payments.</p>"},{"location":"examples/#refinance-scenario","title":"Refinance Scenario","text":"<pre><code>mortgage amortize \\\n  --type fixed \\\n  --balance 400000 \\\n  --rate 6.5 \\\n  --term 360 \\\n  --refinance-date 2028-01-01 \\\n  --new-rate 5.25 \\\n  --new-term 300 \\\n  --refi-fees 5000\n</code></pre> <p>Refinance into a lower rate with closing costs added to the new loan.</p>"},{"location":"examples/#compare-effective-apr-with-discount-points","title":"Compare Effective APR With Discount Points","text":"<pre><code>mortgage compare-apr \\\n  --principal 400000 \\\n  --rate 6.5 \\\n  --term 360 \\\n  --points 1.0 \\\n  --fees 3000\n</code></pre> <p>Shows how buying points affects cost of borrowing.</p>"},{"location":"examples/#refinance-breakeven-calculation","title":"Refinance Breakeven Calculation","text":"<pre><code>mortgage breakeven \\\n  --monthly-savings 175 \\\n  --closing-costs 4000\n</code></pre> <p>Returns the number of months to breakeven on a refinance.</p>"},{"location":"examples/#compare-scenarios-graph","title":"Compare Scenarios (Graph)","text":"<pre><code>mortgage plot \\\n  --scenarios 400000 6.5 360 \\\n  --scenarios 400000 5.5 360 \\\n  --scenarios 400000 4.5 180\n</code></pre> <p>Visually compares multiple amortization curves.</p>"},{"location":"examples/#saving-csv-output","title":"Saving CSV Output","text":"<pre><code>mortgage amortize \\\n  --type fixed \\\n  --balance 400000 \\\n  --rate 6.25 \\\n  --term 360 \\\n  --output examples/loan_fixed_400k.csv\n</code></pre> <p>See the loan_types page for a summary of all supported products.</p>"},{"location":"forward_rates/","title":"Forward Rates and Indexed Loans","text":"<p>Many modern loan products (especially ARMs and HELOCs) use benchmark interest rates like SOFR, Prime, or 1-Year CMT to determine monthly payments. This module supports both static and forward-looking indexed loans via a structured forward rate file.</p>"},{"location":"forward_rates/#supported-indexes","title":"Supported Indexes","text":"<p>You can model any loan tied to a published index:</p> <ul> <li>SOFR (Secured Overnight Financing Rate)</li> <li>Prime Rate</li> <li>Treasury CMT (1Y/5Y/7Y/10Y)</li> <li>Custom indexes (e.g., LIBOR, BSBY, Fed Funds) with your own forward curve</li> </ul>"},{"location":"forward_rates/#forward-rate-file","title":"Forward Rate File","text":"<p>The model reads <code>/utils/data/macroeconforward.txt</code> which should contain:</p> <pre><code>Date    Index1  Index2  ...\n2025-07-01  5.30    7.75\n2025-08-01  5.32    7.75\n...\n</code></pre> <p>Each row represents projected rates for a future month. All values are expressed in annualized percent.</p>"},{"location":"forward_rates/#example-arm-with-sofr-index","title":"Example: ARM With SOFR Index","text":"<pre><code>mortgage amortize \\\n  --type arm \\\n  --index SOFR \\\n  --margin 2.75 \\\n  --balance 400000 \\\n  --rate 6.0 \\\n  --term 360\n</code></pre> <ul> <li><code>--rate</code>: used as the initial teaser rate</li> <li><code>--index</code>: specifies which forward rate column to use</li> <li><code>--margin</code>: added to the index rate for effective interest</li> <li>Monthly rates are pulled from the forward file using the loan's payment schedule</li> </ul>"},{"location":"forward_rates/#customizing-the-curve","title":"Customizing the Curve","text":"<p>To simulate alternate economic environments, simply replace or modify the forward curve in <code>macroeconforward.txt</code>.</p> <p>You can also support historical rate analysis by creating a combined file like:</p> <pre><code>Date        SOFR\n2022-01-01  0.05\n...\n2025-07-01  5.30\n</code></pre>"},{"location":"forward_rates/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Adjustable Rate Mortgages (ARMs)</li> <li>HELOC repayment modeling</li> <li>Forward-looking refinance feasibility</li> <li>Rate shock stress testing</li> </ul> <p>See architecture.md for implementation details and integration options.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 Arun Kumar</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell    copies of the Software, and to permit persons to whom the Software is        furnished to do so, subject to the following conditions:                       </p> <p>The above copyright notice and this permission notice shall be included in   all copies or substantial portions of the Software.                           </p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER       LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN    THE SOFTWARE.</p>"},{"location":"loan_types/","title":"Loan Types","text":"<p>This tool supports a range of U.S. mortgage loan types. Each loan has distinct amortization rules, fees, and optional parameters.</p>"},{"location":"loan_types/#fixed-rate-loans","title":"Fixed Rate Loans","text":"<p>Fixed rate loans maintain the same interest rate over the life of the loan. These are the simplest to model and are ideal for borrowers seeking predictable payments.</p> <ul> <li>Use with: <code>--type fixed</code></li> <li>Optional: <code>--extra-payment</code>, <code>--extra-frequency</code></li> </ul>"},{"location":"loan_types/#adjustable-rate-mortgages-arms","title":"Adjustable Rate Mortgages (ARMs)","text":"<p>ARMs begin with a fixed-rate period and then adjust periodically based on an index (e.g. SOFR) plus a margin.</p> <ul> <li>Use with: <code>--type arm</code></li> <li>Configure with: <code>--index</code>, <code>--margin</code></li> <li>Example: A 5/6 ARM has 5 years fixed, adjusts every 6 months</li> </ul>"},{"location":"loan_types/#fha-loans","title":"FHA Loans","text":"<p>FHA loans are backed by the Federal Housing Administration. They include:</p> <ul> <li>Upfront MIP (1.75%) added to principal</li> <li>Monthly MIP (0.85% annually by default)</li> <li> <p>Lower credit requirements</p> </li> <li> <p>Use with: <code>--type fha</code></p> </li> </ul>"},{"location":"loan_types/#va-loans","title":"VA Loans","text":"<p>VA loans are for veterans and active-duty military. Features include:</p> <ul> <li>No PMI</li> <li>One-time VA guarantee fee (default 2.25%)</li> <li> <p>More flexible underwriting</p> </li> <li> <p>Use with: <code>--type va</code></p> </li> </ul>"},{"location":"loan_types/#usda-loans","title":"USDA Loans","text":"<p>USDA loans support rural homebuyers. They include:</p> <ul> <li>One-time guarantee fee (1.00% default)</li> <li>Annual fee (0.35%) added monthly</li> <li> <p>No PMI</p> </li> <li> <p>Use with: <code>--type usda</code></p> </li> </ul>"},{"location":"loan_types/#helocs-home-equity-line-of-credit","title":"HELOCs (Home Equity Line of Credit)","text":"<p>HELOCs allow borrowing during a draw period followed by repayment:</p> <ul> <li>Interest-only draw phase (e.g., 10 years)</li> <li>Repayment phase (e.g., 15\u201320 years)</li> <li> <p>Adjustable rates typically tied to PRIME or SOFR</p> </li> <li> <p>Use with: <code>--type heloc</code></p> </li> <li>Configure draw/repay: <code>--draw-period</code>, <code>--repayment-term</code></li> <li>ARM-style index support: <code>--index</code>, <code>--margin</code></li> </ul>"},{"location":"loan_types/#summary-table","title":"Summary Table","text":"Loan Type PMI/MIP Upfront Fees Adjustable? Notes Fixed Optional None \u274c Stable and simple ARM Optional None \u2705 Rate changes after fixed period FHA \u2705 1.75% MIP \u274c Lower credit, extra fees VA \u274c 2.25% VA Fee \u274c For veterans only USDA \u274c 1.0% Fee + 0.35% annual \u274c For rural borrowers HELOC \u274c None \u2705 Draw + repay phases <p>See CLI Options for how to configure each loan type.</p>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#loan","title":"Loan","text":"<p>Base Loan class supporting various mortgage types.</p>"},{"location":"reference/#mortgage_tools.loan.Loan--parameters","title":"Parameters","text":"<p>principal : float     Original loan amount. term_months : int     Loan term in months. rate : float     Nominal annual interest rate (APR). origination_date : datetime.date     Date the loan originated. loan_type : str, optional     Type of loan: 'fixed', 'arm', 'fha', 'heloc', 'va', 'usda'. Default is 'fixed'. compounding : str, optional     Interest compounding method (e.g., '30E/360', 'A/365F'). Default is '30E/360'. pmi : bool, optional     Whether the loan includes Private Mortgage Insurance. Default is False. draw_period_months : int, optional     Number of months for interest-only draw period (HELOCs). repayment_term_months : int, optional     Repayment phase after draw period (HELOCs). extra_payment_amount : float or Decimal, optional     Fixed recurring extra payment amount. extra_payment_frequency : str, optional     Frequency of extra payments ('monthly', 'biweekly').</p> Source code in <code>mortgage_tools/loan.py</code> <pre><code>class Loan:\n    \"\"\"Base Loan class supporting various mortgage types.\n\n    Parameters\n    ----------\n    principal : float\n        Original loan amount.\n    term_months : int\n        Loan term in months.\n    rate : float\n        Nominal annual interest rate (APR).\n    origination_date : datetime.date\n        Date the loan originated.\n    loan_type : str, optional\n        Type of loan: 'fixed', 'arm', 'fha', 'heloc', 'va', 'usda'. Default is 'fixed'.\n    compounding : str, optional\n        Interest compounding method (e.g., '30E/360', 'A/365F'). Default is '30E/360'.\n    pmi : bool, optional\n        Whether the loan includes Private Mortgage Insurance. Default is False.\n    draw_period_months : int, optional\n        Number of months for interest-only draw period (HELOCs).\n    repayment_term_months : int, optional\n        Repayment phase after draw period (HELOCs).\n    extra_payment_amount : float or Decimal, optional\n        Fixed recurring extra payment amount.\n    extra_payment_frequency : str, optional\n        Frequency of extra payments ('monthly', 'biweekly').\n    \"\"\"\n    def __init__(self, principal, term_months, rate, origination_date: date,\n                 loan_type='fixed', compounding='30E/360', pmi=False,\n                 draw_period_months: Optional[int] = None, repayment_term_months: Optional[int] = None,\n                 extra_payment_amount: Optional[Union[float, Decimal]] = None,\n                 extra_payment_frequency: Optional[str] = None):\n        self.principal = Decimal(principal)\n        self.original_balance = Decimal(principal)\n        self.term = term_months\n        self.rate = Decimal(rate)\n        self.origination_date = origination_date\n        self.loan_type = loan_type\n        self.compounding = compounding\n        self.is_pmi = pmi\n\n        # ARM attributes\n        self.index = None\n        self.margin = Decimal(\"0.00\")\n        self.arm_structure = None\n        self.caps = {'initial': None, 'periodic': None, 'lifetime': None}\n\n        # HELOC support\n        self.draw_period_months = draw_period_months or 0\n        self.repayment_term_months = repayment_term_months or 0\n        self.is_heloc = loan_type == 'heloc'\n\n        # FHA support\n        self.is_fha = loan_type == 'fha'\n        self.fha_upfront = Decimal(\"0.0175\")  # 1.75% upfront MIP default\n        self.fha_monthly = Decimal(\"0.0085\") / 12  # 0.85% annualized\n        if self.is_fha:\n            self.principal += self.principal * self.fha_upfront\n\n        # VA/USDA support\n        self.is_va = loan_type == 'va'\n        self.is_usda = loan_type == 'usda'\n        self.guarantee_fee = Decimal(\"0.0225\") if self.is_va else Decimal(\"0.01\")\n        self.usda_annual_fee = Decimal(\"0.0035\") if self.is_usda else Decimal(\"0.00\")\n        if self.is_va or self.is_usda:\n            self.principal += self.principal * self.guarantee_fee\n        if self.is_va or self.is_usda:\n            self.is_pmi = False\n\n        # Extra payment\n        self.extra_payment_amount = Decimal(extra_payment_amount) if extra_payment_amount else Decimal(\"0.00\")\n        self.extra_payment_frequency = extra_payment_frequency\n\n    @classmethod\n    def from_fha(cls, principal, term, rate, origination_date):\n        \"\"\"Construct an FHA loan object.\"\"\"\n        return cls(principal, term, rate, origination_date, loan_type='fha')\n\n    @classmethod\n    def from_va(cls, principal, term, rate, origination_date):\n        \"\"\"Construct a VA loan object.\"\"\"\n        return cls(principal, term, rate, origination_date, loan_type='va')\n\n    @classmethod\n    def from_usda(cls, principal, term, rate, origination_date):\n        \"\"\"Construct a USDA loan object.\"\"\"\n        return cls(principal, term, rate, origination_date, loan_type='usda')\n\n    @classmethod\n    def from_arm_type(cls, arm_type: str, principal, term, rate, origination_date):\n        \"\"\"Construct an ARM loan from a hybrid ARM string (e.g., '5/6').\n\n        Parameters\n        ----------\n        arm_type : str\n            Format is '{fixed_period}/{adjustment_freq}' in years/months.\n        \"\"\"\n        fixed, freq = map(int, arm_type.split('/'))\n        loan = cls(principal, term, rate, origination_date, loan_type='arm')\n        loan.arm_structure = (fixed, freq)\n        return loan\n\n    def set_indexed_rate(self, index_name: str, margin: float, caps=(2, 1, 5)):\n        \"\"\"Configure index-based rate adjustment (for ARMs or HELOCs).\n\n        Parameters\n        ----------\n        index_name : str\n            Name of the index (e.g., 'SOFR', 'PRIME').\n        margin : float\n            Rate margin added to index.\n        caps : tuple\n            Tuple of (initial cap, periodic cap, lifetime cap).\n        \"\"\"\n        self.index = index_name.upper()\n        self.margin = Decimal(margin)\n        self.caps = {'initial': caps[0], 'periodic': caps[1], 'lifetime': caps[2]}\n\n    def refinance(self, new_rate: float, refinance_date: date, new_term: Optional[int] = None, fees: float = 0.0):\n        \"\"\"Creates a new Loan object simulating a refinance at a given date.\n\n        Parameters\n        ----------\n        new_rate : float\n            New interest rate.\n        refinance_date : date\n            Date of refinance (must match amortizer schedule).\n        new_term : int, optional\n            Optional new loan term in months.\n        fees : float, optional\n            Optional closing costs added to balance.\n\n        Returns\n        -------\n        Loan\n            New refinanced Loan object.\n        \"\"\"\n        return Loan(\n            principal=self.principal + Decimal(fees),\n            term_months=new_term or self.term,\n            rate=new_rate,\n            origination_date=refinance_date,\n            loan_type=self.loan_type,\n            compounding=self.compounding,\n            pmi=self.is_pmi,\n            draw_period_months=self.draw_period_months,\n            repayment_term_months=self.repayment_term_months,\n            extra_payment_amount=float(self.extra_payment_amount),\n            extra_payment_frequency=self.extra_payment_frequency\n        )\n\n    def recast(self, lump_sum: float, recast_date: date):\n        \"\"\"Apply a lump-sum principal reduction and update loan balance.\n\n        Parameters\n        ----------\n        lump_sum : float\n            Amount to reduce from principal.\n        recast_date : date\n            Date the recast is executed.\n        \"\"\"\n        self.principal -= Decimal(lump_sum)\n        self.origination_date = recast_date\n        self.original_balance = self.principal\n\n    def apply_extra_payment(self, amount: float, frequency: str):\n        \"\"\"Set up recurring extra payments.\n\n        Parameters\n        ----------\n        amount : float\n            Extra payment amount to apply.\n        frequency : str\n            Payment frequency, e.g., 'monthly', 'biweekly'.\n        \"\"\"\n        self.extra_payment_amount = Decimal(str(amount))\n        self.extra_payment_frequency = frequency\n\n    def to_dict(self):\n        \"\"\"Return core loan parameters as dictionary (for CLI or plotting use).\"\"\"\n        return {\n            \"principal\": float(self.principal),\n            \"term_months\": self.term,\n            \"rate\": float(self.rate),\n            \"start_date\": self.origination_date.isoformat(),\n            \"type\": self.loan_type.upper()\n        }\n</code></pre>"},{"location":"reference/#mortgage_tools.loan.Loan.apply_extra_payment","title":"<code>apply_extra_payment(amount, frequency)</code>","text":"<p>Set up recurring extra payments.</p>"},{"location":"reference/#mortgage_tools.loan.Loan.apply_extra_payment--parameters","title":"Parameters","text":"<p>amount : float     Extra payment amount to apply. frequency : str     Payment frequency, e.g., 'monthly', 'biweekly'.</p> Source code in <code>mortgage_tools/loan.py</code> <pre><code>def apply_extra_payment(self, amount: float, frequency: str):\n    \"\"\"Set up recurring extra payments.\n\n    Parameters\n    ----------\n    amount : float\n        Extra payment amount to apply.\n    frequency : str\n        Payment frequency, e.g., 'monthly', 'biweekly'.\n    \"\"\"\n    self.extra_payment_amount = Decimal(str(amount))\n    self.extra_payment_frequency = frequency\n</code></pre>"},{"location":"reference/#mortgage_tools.loan.Loan.from_arm_type","title":"<code>from_arm_type(arm_type, principal, term, rate, origination_date)</code>  <code>classmethod</code>","text":"<p>Construct an ARM loan from a hybrid ARM string (e.g., '5/6').</p>"},{"location":"reference/#mortgage_tools.loan.Loan.from_arm_type--parameters","title":"Parameters","text":"<p>arm_type : str     Format is '{fixed_period}/{adjustment_freq}' in years/months.</p> Source code in <code>mortgage_tools/loan.py</code> <pre><code>@classmethod\ndef from_arm_type(cls, arm_type: str, principal, term, rate, origination_date):\n    \"\"\"Construct an ARM loan from a hybrid ARM string (e.g., '5/6').\n\n    Parameters\n    ----------\n    arm_type : str\n        Format is '{fixed_period}/{adjustment_freq}' in years/months.\n    \"\"\"\n    fixed, freq = map(int, arm_type.split('/'))\n    loan = cls(principal, term, rate, origination_date, loan_type='arm')\n    loan.arm_structure = (fixed, freq)\n    return loan\n</code></pre>"},{"location":"reference/#mortgage_tools.loan.Loan.from_fha","title":"<code>from_fha(principal, term, rate, origination_date)</code>  <code>classmethod</code>","text":"<p>Construct an FHA loan object.</p> Source code in <code>mortgage_tools/loan.py</code> <pre><code>@classmethod\ndef from_fha(cls, principal, term, rate, origination_date):\n    \"\"\"Construct an FHA loan object.\"\"\"\n    return cls(principal, term, rate, origination_date, loan_type='fha')\n</code></pre>"},{"location":"reference/#mortgage_tools.loan.Loan.from_usda","title":"<code>from_usda(principal, term, rate, origination_date)</code>  <code>classmethod</code>","text":"<p>Construct a USDA loan object.</p> Source code in <code>mortgage_tools/loan.py</code> <pre><code>@classmethod\ndef from_usda(cls, principal, term, rate, origination_date):\n    \"\"\"Construct a USDA loan object.\"\"\"\n    return cls(principal, term, rate, origination_date, loan_type='usda')\n</code></pre>"},{"location":"reference/#mortgage_tools.loan.Loan.from_va","title":"<code>from_va(principal, term, rate, origination_date)</code>  <code>classmethod</code>","text":"<p>Construct a VA loan object.</p> Source code in <code>mortgage_tools/loan.py</code> <pre><code>@classmethod\ndef from_va(cls, principal, term, rate, origination_date):\n    \"\"\"Construct a VA loan object.\"\"\"\n    return cls(principal, term, rate, origination_date, loan_type='va')\n</code></pre>"},{"location":"reference/#mortgage_tools.loan.Loan.recast","title":"<code>recast(lump_sum, recast_date)</code>","text":"<p>Apply a lump-sum principal reduction and update loan balance.</p>"},{"location":"reference/#mortgage_tools.loan.Loan.recast--parameters","title":"Parameters","text":"<p>lump_sum : float     Amount to reduce from principal. recast_date : date     Date the recast is executed.</p> Source code in <code>mortgage_tools/loan.py</code> <pre><code>def recast(self, lump_sum: float, recast_date: date):\n    \"\"\"Apply a lump-sum principal reduction and update loan balance.\n\n    Parameters\n    ----------\n    lump_sum : float\n        Amount to reduce from principal.\n    recast_date : date\n        Date the recast is executed.\n    \"\"\"\n    self.principal -= Decimal(lump_sum)\n    self.origination_date = recast_date\n    self.original_balance = self.principal\n</code></pre>"},{"location":"reference/#mortgage_tools.loan.Loan.refinance","title":"<code>refinance(new_rate, refinance_date, new_term=None, fees=0.0)</code>","text":"<p>Creates a new Loan object simulating a refinance at a given date.</p>"},{"location":"reference/#mortgage_tools.loan.Loan.refinance--parameters","title":"Parameters","text":"<p>new_rate : float     New interest rate. refinance_date : date     Date of refinance (must match amortizer schedule). new_term : int, optional     Optional new loan term in months. fees : float, optional     Optional closing costs added to balance.</p>"},{"location":"reference/#mortgage_tools.loan.Loan.refinance--returns","title":"Returns","text":"<p>Loan     New refinanced Loan object.</p> Source code in <code>mortgage_tools/loan.py</code> <pre><code>def refinance(self, new_rate: float, refinance_date: date, new_term: Optional[int] = None, fees: float = 0.0):\n    \"\"\"Creates a new Loan object simulating a refinance at a given date.\n\n    Parameters\n    ----------\n    new_rate : float\n        New interest rate.\n    refinance_date : date\n        Date of refinance (must match amortizer schedule).\n    new_term : int, optional\n        Optional new loan term in months.\n    fees : float, optional\n        Optional closing costs added to balance.\n\n    Returns\n    -------\n    Loan\n        New refinanced Loan object.\n    \"\"\"\n    return Loan(\n        principal=self.principal + Decimal(fees),\n        term_months=new_term or self.term,\n        rate=new_rate,\n        origination_date=refinance_date,\n        loan_type=self.loan_type,\n        compounding=self.compounding,\n        pmi=self.is_pmi,\n        draw_period_months=self.draw_period_months,\n        repayment_term_months=self.repayment_term_months,\n        extra_payment_amount=float(self.extra_payment_amount),\n        extra_payment_frequency=self.extra_payment_frequency\n    )\n</code></pre>"},{"location":"reference/#mortgage_tools.loan.Loan.set_indexed_rate","title":"<code>set_indexed_rate(index_name, margin, caps=(2, 1, 5))</code>","text":"<p>Configure index-based rate adjustment (for ARMs or HELOCs).</p>"},{"location":"reference/#mortgage_tools.loan.Loan.set_indexed_rate--parameters","title":"Parameters","text":"<p>index_name : str     Name of the index (e.g., 'SOFR', 'PRIME'). margin : float     Rate margin added to index. caps : tuple     Tuple of (initial cap, periodic cap, lifetime cap).</p> Source code in <code>mortgage_tools/loan.py</code> <pre><code>def set_indexed_rate(self, index_name: str, margin: float, caps=(2, 1, 5)):\n    \"\"\"Configure index-based rate adjustment (for ARMs or HELOCs).\n\n    Parameters\n    ----------\n    index_name : str\n        Name of the index (e.g., 'SOFR', 'PRIME').\n    margin : float\n        Rate margin added to index.\n    caps : tuple\n        Tuple of (initial cap, periodic cap, lifetime cap).\n    \"\"\"\n    self.index = index_name.upper()\n    self.margin = Decimal(margin)\n    self.caps = {'initial': caps[0], 'periodic': caps[1], 'lifetime': caps[2]}\n</code></pre>"},{"location":"reference/#mortgage_tools.loan.Loan.to_dict","title":"<code>to_dict()</code>","text":"<p>Return core loan parameters as dictionary (for CLI or plotting use).</p> Source code in <code>mortgage_tools/loan.py</code> <pre><code>def to_dict(self):\n    \"\"\"Return core loan parameters as dictionary (for CLI or plotting use).\"\"\"\n    return {\n        \"principal\": float(self.principal),\n        \"term_months\": self.term,\n        \"rate\": float(self.rate),\n        \"start_date\": self.origination_date.isoformat(),\n        \"type\": self.loan_type.upper()\n    }\n</code></pre>"},{"location":"reference/#loanamortizer","title":"LoanAmortizer","text":"<p>LoanAmortizer builds an amortization schedule for various loan types including: - Fixed Rate Loans - Adjustable Rate Mortgages (ARMs) - FHA Loans with MIP - VA and USDA Loans with Guarantee Fees - HELOCs with draw and repayment phases</p> <p>It supports: - Custom forward rate schedules - Insurance premiums (PMI, MIP, USDA annual fee) - Decimal-based precision for all financial calculations</p>"},{"location":"reference/#mortgage_tools.amortizer.LoanAmortizer--parameters","title":"Parameters","text":"<p>loan : Loan     An instance of the Loan class with fully defined parameters. custom_rate_schedule : dict, optional     A dictionary mapping date strings (\"YYYY-MM-DD\") to interest rate overrides.</p> Source code in <code>mortgage_tools/amortizer.py</code> <pre><code>class LoanAmortizer:\n    \"\"\"\n    LoanAmortizer builds an amortization schedule for various loan types including:\n    - Fixed Rate Loans\n    - Adjustable Rate Mortgages (ARMs)\n    - FHA Loans with MIP\n    - VA and USDA Loans with Guarantee Fees\n    - HELOCs with draw and repayment phases\n\n    It supports:\n    - Custom forward rate schedules\n    - Insurance premiums (PMI, MIP, USDA annual fee)\n    - Decimal-based precision for all financial calculations\n\n    Parameters\n    ----------\n    loan : Loan\n        An instance of the Loan class with fully defined parameters.\n    custom_rate_schedule : dict, optional\n        A dictionary mapping date strings (\"YYYY-MM-DD\") to interest rate overrides.\n    \"\"\"\n    def __init__(self, loan, custom_rate_schedule=None):\n        self.loan = loan\n        self.schedule = []\n        self.custom_rate_schedule = custom_rate_schedule or {}\n        self.rates = RateReader()\n        self._build_amortization()\n\n    def _get_effective_rate(self, date_str) -&gt; Decimal:\n        \"\"\"\n        Returns the effective interest rate for a given date.\n        - Uses fixed rate if applicable\n        - Uses indexed rate + margin for ARM/HELOC\n        - Honors custom rate schedule overrides\n\n        Parameters\n        ----------\n        date_str : str\n            Date in YYYY-MM-DD format.\n\n        Returns\n        -------\n        Decimal\n            Effective interest rate as a Decimal.\n        \"\"\"\n        if self.loan.loan_type == 'fixed':\n            return self.loan.rate\n        elif self.loan.loan_type in ['arm', 'heloc'] and self.loan.index:\n            raw_rate = self.rates.get_rate(self.loan.index, date_str)\n            return (Decimal(str(raw_rate)) + self.loan.margin).quantize(Decimal(\"0.0001\"))\n        else:\n            return self.loan.rate\n\n    def _calculate_insurance(self, balance: Decimal, month: int) -&gt; Decimal:\n        \"\"\"\n        Calculate monthly insurance (MIP, PMI, or USDA annual fee) based on loan type.\n\n        Parameters\n        ----------\n        balance : Decimal\n            Current outstanding balance.\n        month : int\n            Current month number in the loan term.\n\n        Returns\n        -------\n        Decimal\n            Monthly insurance premium amount.\n        \"\"\"\n        if self.loan.is_fha:\n            return (balance * self.loan.fha_monthly).quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP)\n        elif self.loan.is_usda:\n            return (balance * self.loan.usda_annual_fee / Decimal(\"12\")).quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP)\n        elif self.loan.is_pmi:\n            ltv = balance / self.loan.original_balance\n            if ltv &lt;= Decimal(\"0.78\") or month &gt; 132:\n                return Decimal(\"0.00\")\n            return (balance * self.loan.pmi_rate).quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP)\n        return Decimal(\"0.00\")\n\n    def _build_amortization(self):\n        \"\"\"\n        Constructs the full amortization schedule from origination through maturity.\n        Handles:\n        - Draw period and interest-only payments (HELOC)\n        - Full amortization including principal + interest\n        - Monthly insurance additions\n        - Accurate payment calculations using present value formula\n        \"\"\"\n        balance = self.loan.principal\n        rate = self.loan.rate\n        current_date = self.loan.origination_date\n        total_term = self.loan.term\n        draw_period = self.loan.draw_period_months\n        repay_term = self.loan.repayment_term_months or (total_term - draw_period)\n\n        for month in range(1, total_term + 1):\n            current_date += timedelta(days=30)\n            date_str = current_date.strftime('%Y-%m-%d')\n\n            rate = Decimal(str(self.custom_rate_schedule.get(date_str, self._get_effective_rate(date_str))))\n            interest = Decimal(calculate_interest(balance, rate, 30, self.loan.compounding)).quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP)\n\n            if self.loan.is_heloc and month &lt;= draw_period:\n                payment = interest\n                principal = Decimal(\"0.00\")\n            else:\n                monthly_rate = rate / Decimal(\"12\") / Decimal(\"100\")\n                if self.loan.is_heloc:\n                    remaining_term = total_term - draw_period - (month - draw_period - 1)\n                else:\n                    remaining_term = total_term - month + 1\n                payment = (balance * monthly_rate / (1 - (1 + monthly_rate) ** -remaining_term)).quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP)\n                principal = (payment - interest).quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP)\n\n            insurance = self._calculate_insurance(balance, month)\n            total_payment = (payment + insurance).quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP)\n            ending_balance = (balance - principal).quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP)\n\n            self.schedule.append({\n                \"Month\": month,\n                \"Date\": date_str,\n                \"Beginning Balance\": float(balance),\n                \"Payment\": float(payment),\n                \"Principal\": float(principal),\n                \"Interest\": float(interest),\n                \"PMI/MIP\": float(insurance),\n                \"Total Payment\": float(total_payment),\n                \"Ending Balance\": float(ending_balance)\n            })\n\n            balance = ending_balance\n\n    def to_dataframe(self):\n        \"\"\"\n        Returns the amortization schedule as a pandas DataFrame.\n\n        Returns\n        -------\n        pd.DataFrame\n            Tabular amortization schedule.\n        \"\"\"\n        return pd.DataFrame(self.schedule)\n\n    def to_csv(self, filepath):\n        \"\"\"\n        Writes the amortization schedule to a CSV file.\n\n        Parameters\n        ----------\n        filepath : str\n            Destination file path.\n        \"\"\"\n        self.to_dataframe().to_csv(filepath, index=False)\n</code></pre>"},{"location":"reference/#mortgage_tools.amortizer.LoanAmortizer.to_csv","title":"<code>to_csv(filepath)</code>","text":"<p>Writes the amortization schedule to a CSV file.</p>"},{"location":"reference/#mortgage_tools.amortizer.LoanAmortizer.to_csv--parameters","title":"Parameters","text":"<p>filepath : str     Destination file path.</p> Source code in <code>mortgage_tools/amortizer.py</code> <pre><code>def to_csv(self, filepath):\n    \"\"\"\n    Writes the amortization schedule to a CSV file.\n\n    Parameters\n    ----------\n    filepath : str\n        Destination file path.\n    \"\"\"\n    self.to_dataframe().to_csv(filepath, index=False)\n</code></pre>"},{"location":"reference/#mortgage_tools.amortizer.LoanAmortizer.to_dataframe","title":"<code>to_dataframe()</code>","text":"<p>Returns the amortization schedule as a pandas DataFrame.</p>"},{"location":"reference/#mortgage_tools.amortizer.LoanAmortizer.to_dataframe--returns","title":"Returns","text":"<p>pd.DataFrame     Tabular amortization schedule.</p> Source code in <code>mortgage_tools/amortizer.py</code> <pre><code>def to_dataframe(self):\n    \"\"\"\n    Returns the amortization schedule as a pandas DataFrame.\n\n    Returns\n    -------\n    pd.DataFrame\n        Tabular amortization schedule.\n    \"\"\"\n    return pd.DataFrame(self.schedule)\n</code></pre>"},{"location":"reference/#ratereader","title":"RateReader","text":"<p>Utility class to read and serve forward interest rates from macroeconomic projections. Supports Prime, LIBOR, SOFR, MTA, CMT, and fallback to FRED codes.</p> Source code in <code>utils/rates.py</code> <pre><code>class RateReader:\n    \"\"\"\n    Utility class to read and serve forward interest rates from macroeconomic projections.\n    Supports Prime, LIBOR, SOFR, MTA, CMT, and fallback to FRED codes.\n    \"\"\"\n\n    SUPPORTED_INDICES = {\n        'LIBOR1': 'LIBOR1MonRate',\n        'LIBOR3': 'LIBOR3MonRate',\n        'LIBOR6': 'LIBOR6MonRate',\n        'LIBOR12': 'LIBOR12MonRate',\n        'PRIME': 'PrimeRate',\n        'MTA': 'TreasAvg',\n        'CMT12': 'CMT1YearRate',\n        'SOFR': 'SOFR30DAYAVG'\n    }\n\n    def __init__(self, filepath: Optional[str] = None):\n        \"\"\"\n        Initialize the rate reader.\n\n        Parameters\n        ----------\n        filepath : str, optional\n            Path to the rate projection file. If not provided, defaults to 'data/macroeconforward.txt'.\n        \"\"\"\n        self.filepath = filepath or os.path.join(os.path.dirname(__file__), \"../data\", \"macroeconforward.txt\")\n        self.rates_df = self._load_rates()\n\n    def _load_rates(self) -&gt; pd.DataFrame:\n        if self.filepath.endswith(\".csv\"):\n            return pd.read_csv(self.filepath, sep=None, engine='python')\n        else:\n            return pd.read_csv(self.filepath, sep='\\t')\n\n    def get_rate(self, index: str, date_str: str) -&gt; float:\n        \"\"\"\n        Retrieve the forward rate for a specific index and date.\n\n        Parameters\n        ----------\n        index : str\n            The macroeconomic index (e.g., 'PRIME', 'LIBOR12').\n        date_str : str\n            Date string in format 'YYYY-MM-DD'.\n\n        Returns\n        -------\n        float\n            Forward interest rate.\n        \"\"\"\n        index_col = self.SUPPORTED_INDICES.get(index.upper())\n        if index_col is None:\n            raise ValueError(f\"Unsupported index: {index}. Supported: {list(self.SUPPORTED_INDICES.keys())}\")\n\n        row = self.rates_df[self.rates_df.iloc[:, 0] == date_str]\n        if row.empty:\n            raise KeyError(f\"Date {date_str} not found in rate file.\")\n\n        return float(row[index_col].values[0])\n</code></pre>"},{"location":"reference/#utils.rates.RateReader.__init__","title":"<code>__init__(filepath=None)</code>","text":"<p>Initialize the rate reader.</p>"},{"location":"reference/#utils.rates.RateReader.__init__--parameters","title":"Parameters","text":"<p>filepath : str, optional     Path to the rate projection file. If not provided, defaults to 'data/macroeconforward.txt'.</p> Source code in <code>utils/rates.py</code> <pre><code>def __init__(self, filepath: Optional[str] = None):\n    \"\"\"\n    Initialize the rate reader.\n\n    Parameters\n    ----------\n    filepath : str, optional\n        Path to the rate projection file. If not provided, defaults to 'data/macroeconforward.txt'.\n    \"\"\"\n    self.filepath = filepath or os.path.join(os.path.dirname(__file__), \"../data\", \"macroeconforward.txt\")\n    self.rates_df = self._load_rates()\n</code></pre>"},{"location":"reference/#utils.rates.RateReader.get_rate","title":"<code>get_rate(index, date_str)</code>","text":"<p>Retrieve the forward rate for a specific index and date.</p>"},{"location":"reference/#utils.rates.RateReader.get_rate--parameters","title":"Parameters","text":"<p>index : str     The macroeconomic index (e.g., 'PRIME', 'LIBOR12'). date_str : str     Date string in format 'YYYY-MM-DD'.</p>"},{"location":"reference/#utils.rates.RateReader.get_rate--returns","title":"Returns","text":"<p>float     Forward interest rate.</p> Source code in <code>utils/rates.py</code> <pre><code>def get_rate(self, index: str, date_str: str) -&gt; float:\n    \"\"\"\n    Retrieve the forward rate for a specific index and date.\n\n    Parameters\n    ----------\n    index : str\n        The macroeconomic index (e.g., 'PRIME', 'LIBOR12').\n    date_str : str\n        Date string in format 'YYYY-MM-DD'.\n\n    Returns\n    -------\n    float\n        Forward interest rate.\n    \"\"\"\n    index_col = self.SUPPORTED_INDICES.get(index.upper())\n    if index_col is None:\n        raise ValueError(f\"Unsupported index: {index}. Supported: {list(self.SUPPORTED_INDICES.keys())}\")\n\n    row = self.rates_df[self.rates_df.iloc[:, 0] == date_str]\n    if row.empty:\n        raise KeyError(f\"Date {date_str} not found in rate file.\")\n\n    return float(row[index_col].values[0])\n</code></pre>"},{"location":"reference/#utility-functions","title":"Utility Functions","text":""},{"location":"reference/#effective-apr","title":"Effective APR","text":"<p>Estimate Effective APR using cost-adjusted loan proceeds and IRR method.</p>"},{"location":"reference/#utils.effective_apr.effective_apr--parameters","title":"Parameters","text":"<p>principal : float     Loan amount. rate : float     Nominal APR. term_months : int     Loan term in months. points : float     Discount points as percent of loan (e.g., 1.0 for 1 point). fees : float     Closing costs not rolled into the loan.</p>"},{"location":"reference/#utils.effective_apr.effective_apr--returns","title":"Returns","text":"<p>float     Effective APR expressed as annual percent.</p> Source code in <code>utils/effective_apr.py</code> <pre><code>def effective_apr(principal, rate, term_months, points=0.0, fees=0.0):\n    \"\"\"Estimate Effective APR using cost-adjusted loan proceeds and IRR method.\n\n    Parameters\n    ----------\n    principal : float\n        Loan amount.\n    rate : float\n        Nominal APR.\n    term_months : int\n        Loan term in months.\n    points : float\n        Discount points as percent of loan (e.g., 1.0 for 1 point).\n    fees : float\n        Closing costs not rolled into the loan.\n\n    Returns\n    -------\n    float\n        Effective APR expressed as annual percent.\n    \"\"\"\n    from numpy_financial import irr\n    from decimal import Decimal\n\n    loan_amount = Decimal(str(principal))\n    upfront_cost = loan_amount * Decimal(str(points)) / Decimal(\"100\") + Decimal(str(fees))\n    net_proceeds = loan_amount - upfront_cost\n\n    monthly_payment = (loan_amount * Decimal(str(rate)) / Decimal(\"1200\")) / \\\n                      (1 - (1 + Decimal(str(rate)) / Decimal(\"1200\")) ** -term_months)\n    cash_flows = [-float(net_proceeds)] + [float(monthly_payment)] * term_months\n\n    internal_rate = irr(cash_flows)\n    if internal_rate is None:\n        return None\n\n    return round((1 + internal_rate) ** 12 - 1, 5) * 100  # Convert monthly IRR to annual %\n</code></pre>"},{"location":"reference/#breakeven-analysis","title":"Breakeven Analysis","text":"<p>Compute breakeven month when refinancing pays off via cumulative monthly savings.</p>"},{"location":"reference/#utils.breakeven.breakeven_analysis--parameters","title":"Parameters","text":"<p>refi_df : pd.DataFrame     Amortization table for refinanced loan. base_df : pd.DataFrame     Amortization table for original loan. refi_costs : float     Closing/refinance costs incurred upfront.</p>"},{"location":"reference/#utils.breakeven.breakeven_analysis--returns","title":"Returns","text":"<p>dict     Contains breakeven month and cumulative savings profile.</p> Source code in <code>utils/breakeven.py</code> <pre><code>def breakeven_analysis(refi_df, base_df, refi_costs=0.0):\n    \"\"\"Compute breakeven month when refinancing pays off via cumulative monthly savings.\n\n    Parameters\n    ----------\n    refi_df : pd.DataFrame\n        Amortization table for refinanced loan.\n    base_df : pd.DataFrame\n        Amortization table for original loan.\n    refi_costs : float\n        Closing/refinance costs incurred upfront.\n\n    Returns\n    -------\n    dict\n        Contains breakeven month and cumulative savings profile.\n    \"\"\"\n    merged = pd.merge(\n        base_df[['Month', 'Total Payment']],\n        refi_df[['Month', 'Total Payment']],\n        on='Month',\n        suffixes=('_base', '_refi')\n    )\n\n    merged['Monthly Savings'] = merged['Total Payment_base'] - merged['Total Payment_refi']\n    merged['Cumulative Savings'] = merged['Monthly Savings'].cumsum()\n    merged['Net Savings'] = merged['Cumulative Savings'] - refi_costs\n\n    breakeven_months = merged[merged['Net Savings'] &gt; 0]['Month']\n    breakeven_month = int(breakeven_months.iloc[0]) if not breakeven_months.empty else None\n\n    return {\n        'breakeven_month': breakeven_month,\n        'net_savings': round(merged['Net Savings'].iloc[-1], 2),\n        'monthly_savings': merged[['Month', 'Monthly Savings', 'Net Savings']]\n    }\n</code></pre>"},{"location":"reference/#plotting","title":"Plotting","text":"<p>Plot the amortization schedule: balances and payment components.</p> <p>Compare two amortization schedules by summarizing key outcome metrics.</p> Source code in <code>utils/exta_payment_compare.py</code> <pre><code>def compare_scenarios(df1, df2):\n    \"\"\"Compare two amortization schedules by summarizing key outcome metrics.\"\"\"\n    def summarize(df):\n        return {\n            'Total Interest': round(df['Interest'].sum(), 2),\n            'Total PMI/MIP': round(df['PMI/MIP'].sum(), 2),\n            'Total Payments': round(df['Total Payment'].sum(), 2),\n            'Payoff Month': df[df['Ending Balance'] &lt;= 0.01]['Month'].min() or df['Month'].max(),\n            'Final Balance': round(df['Ending Balance'].iloc[-1], 2)\n        }\n\n    summary1 = summarize(df1)\n    summary2 = summarize(df2)\n    comparison = pd.DataFrame([summary1, summary2], index=[\"Scenario 1\", \"Scenario 2\"])\n    return comparison\n</code></pre>"},{"location":"reference/#utils.plotting.plot_amortization--parameters","title":"Parameters","text":"<p>df : pd.DataFrame     Output from LoanAmortizer.to_dataframe() title : str     Title for the plot. save_path : str or None     If provided, saves the plot to file.</p> Source code in <code>utils/plotting.py</code> <pre><code>def plot_amortization(df: pd.DataFrame, title=\"Amortization Schedule\", save_path=None):\n    \"\"\"\n    Plot the amortization schedule: balances and payment components.\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        Output from LoanAmortizer.to_dataframe()\n    title : str\n        Title for the plot.\n    save_path : str or None\n        If provided, saves the plot to file.\n    \"\"\"\n    plt.figure(figsize=(12, 6))\n\n    if 'Total Payment' in df.columns:\n        payment_col = 'Total Payment'\n    else:\n        payment_col = 'Payment'\n\n    sns.lineplot(data=df, x=\"Month\", y=\"Beginning Balance\", label=\"Beginning Balance\")\n    sns.lineplot(data=df, x=\"Month\", y=\"Principal\", label=\"Principal\")\n    sns.lineplot(data=df, x=\"Month\", y=\"Interest\", label=\"Interest\")\n    sns.lineplot(data=df, x=\"Month\", y=payment_col, label=\"Total Payment\")\n\n    if \"PMI/MIP\" in df.columns:\n        sns.lineplot(data=df, x=\"Month\", y=\"PMI/MIP\", label=\"PMI/MIP\")\n\n    plt.title(title)\n    plt.xlabel(\"Month\")\n    plt.ylabel(\"Amount ($)\")\n    plt.legend()\n    plt.tight_layout()\n\n    if save_path:\n        plt.savefig(save_path)\n    else:\n        plt.show()\n</code></pre>"},{"location":"scenarios/","title":"Scenario Comparison and Analytics","text":"<p>Beyond single-loan amortization, the toolkit supports multi-scenario comparison and financial analytics for evaluating refinance, recast, or early payoff strategies.</p>"},{"location":"scenarios/#multi-scenario-plotting","title":"\ud83d\udd01 Multi-Scenario Plotting","text":"<p>You can compare how multiple loan structures perform over time using:</p> <pre><code>mortgage plot --scenarios 400000 6.0 360 --scenarios 400000 5.25 360 --scenarios 400000 4.5 180\n</code></pre> <p>Each scenario is a tuple of:</p> <ul> <li>Balance (e.g. 400000)</li> <li>Interest Rate (e.g. 5.5%)</li> <li>Term in Months (e.g. 360)</li> </ul> <p>\ud83d\udcc8 The output is a plot comparing balance trajectories across all scenarios.</p>"},{"location":"scenarios/#breakeven-analysis","title":"\ud83d\udca1 Breakeven Analysis","text":"<p>This tool estimates when a refinance or lump sum recast becomes financially beneficial:</p> <pre><code>mortgage breakeven --monthly-savings 185 --closing-costs 4000\n</code></pre> <p>Outputs:</p> <pre><code>Breakeven reached in: 22 months\n</code></pre> <p>Use this to evaluate how long you need to hold the mortgage to recover refi costs.</p>"},{"location":"scenarios/#effective-apr-comparison","title":"\ud83d\udcca Effective APR Comparison","text":"<p>When paying points or closing costs, the nominal interest rate understates true cost. Use:</p> <pre><code>mortgage compare-apr --principal 400000 --rate 6.0 --term 360 --points 1.0 --fees 3000\n</code></pre> <p>This computes the IRR-based effective APR, taking upfront cost into account:</p> <pre><code>Effective APR: 6.2191%\n</code></pre>"},{"location":"scenarios/#use-cases","title":"\ud83e\udde0 Use Cases","text":"<ul> <li>Choose between 30-year and 15-year fixed</li> <li>Compare rate buydown vs no-points option</li> <li>Evaluate impact of biweekly payments</li> <li>Quantify refinance timing sensitivity</li> </ul>"},{"location":"scenarios/#cli-and-api-interoperability","title":"\ud83d\uddc3\ufe0f CLI and API Interoperability","text":"<p>All analytics functions are available:</p> <ul> <li>From CLI (e.g. <code>mortgage breakeven</code>)</li> <li>As Python functions (e.g. <code>breakeven_analysis(...)</code>)</li> </ul> <p>\ud83d\udcce Next: Command Line Usage</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide walks through how to use the <code>MortgageAmortization</code> CLI tool to simulate, analyze, and compare different mortgage loan structures.</p>"},{"location":"usage/#amortization-schedule","title":"Amortization Schedule","text":"<p>Generate a fixed-rate amortization schedule:</p> <pre><code>python -m cli.cli amortize \\\n  --type fixed \\\n  --balance 400000 \\\n  --rate 6.0 \\\n  --term 360\n</code></pre> <p>Optional arguments:</p> <ul> <li><code>--extra-payment 200</code></li> <li><code>--extra-frequency monthly</code></li> <li><code>--recast-date 2026-01-01 --lump-sum 10000</code></li> <li><code>--refinance-date 2026-01-01 --new-rate 5.25 --new-term 240 --refi-fees 3500</code></li> <li><code>--output amortization.csv</code></li> </ul>"},{"location":"usage/#arm-and-heloc","title":"ARM and HELOC","text":"<p>Simulate an ARM loan with index-based rate adjustments:</p> <pre><code>python -m cli.cli amortize \\\n  --type arm \\\n  --index SOFR \\\n  --margin 2.75 \\\n  --balance 400000 \\\n  --rate 5.0 \\\n  --term 360\n</code></pre> <p>Simulate a HELOC draw + repayment phase:</p> <pre><code>python -m cli.cli amortize \\\n  --type heloc \\\n  --balance 200000 \\\n  --rate 7.5 \\\n  --term 360 \\\n  --draw-period 120 \\\n  --repayment-term 240\n</code></pre>"},{"location":"usage/#compare-scenarios","title":"Compare Scenarios","text":"<p>Visualize amortization curves across multiple loan options:</p> <pre><code>python -m cli.cli plot \\\n  --scenarios 400000 6.0 360 \\\n  --scenarios 400000 5.5 360 \\\n  --scenarios 400000 5.0 240\n</code></pre>"},{"location":"usage/#effective-apr","title":"Effective APR","text":"<p>Compare true APR including points and fees:</p> <pre><code>python -m cli.cli compare-apr \\\n  --principal 400000 \\\n  --rate 5.75 \\\n  --term 360 \\\n  --points 1.0 \\\n  --fees 4500\n</code></pre>"},{"location":"usage/#breakeven-calculator","title":"Breakeven Calculator","text":"<p>Find breakeven point of a refinance:</p> <pre><code>python -m cli.cli breakeven \\\n  --monthly-savings 225 \\\n  --closing-costs 3500\n</code></pre> <p>Returns the number of months until refi pays off.</p>"},{"location":"usage/#other-tips","title":"Other Tips","text":"<ul> <li>Output data to CSV via <code>--output filename.csv</code></li> <li>Dates must be in <code>YYYY-MM-DD</code> format</li> <li>ARM simulations pull index rates from local data (see <code>utils/data/macroeconforward.txt</code>)</li> </ul> <p>For more, explore:</p> <ul> <li>Loan Types Overview</li> <li>Full CLI Reference</li> </ul>"},{"location":"examples/fha_30/","title":"FHA Loan Example (30-Year Fixed)","text":"<p>This example shows the amortization for a $300,000 FHA loan over 30 years with a 6.25% interest rate.</p>"},{"location":"examples/fha_30/#loan-parameters","title":"Loan Parameters","text":"<ul> <li>Type: FHA</li> <li>Principal: $300,000</li> <li>Term: 360 months (30 years)</li> <li>Rate: 6.25%</li> <li>FHA Upfront MIP: 1.75%</li> <li>Monthly MIP: 0.85%</li> </ul>"},{"location":"examples/fha_30/#cli-command","title":"CLI Command","text":"<pre><code>python -m cli.cli amortize \\\n  --type fha \\\n  --balance 300000 \\\n  --rate 6.25 \\\n  --term 360\n</code></pre>"},{"location":"examples/fha_30/#preview","title":"Preview","text":"Month Date Beginning Balance Payment Principal Interest PMI/MIP Total Payment Ending Balance 1 YYYY-MM-DD 305250.00 1879.63 328.13 1586.55 35.00 1920.63 304921.87 ... <p>Note: Full amortization table can be exported with --output examples/fha_30yr.csv.</p>"},{"location":"examples/heloc_draw/","title":"HELOC Draw + Repayment Example","text":"<p>Simulating a $100,000 HELOC with a 10-year interest-only draw and 15-year repayment.</p>"},{"location":"examples/heloc_draw/#loan-parameters","title":"Loan Parameters","text":"<ul> <li>Type: HELOC</li> <li>Balance: $100,000</li> <li>Index: SOFR</li> <li>Margin: 2.5%</li> <li>Draw Period: 120 months (10 years)</li> <li>Repayment Term: 180 months</li> <li>Total Term: 300 months</li> </ul>"},{"location":"examples/heloc_draw/#cli-command","title":"CLI Command","text":"<pre><code>python -m cli.cli amortize \\\n  --type heloc \\\n  --balance 100000 \\\n  --rate 6.5 \\\n  --term 300 \\\n  --index SOFR \\\n  --margin 2.5 \\\n  --draw-period 120 \\\n  --repayment-term 180\n</code></pre>"},{"location":"examples/heloc_draw/#timeline","title":"Timeline","text":"<li> Draw Phase (0\u2013120 months): Interest-only payments <li> Repayment Phase (121\u2013300 months): Fully amortizing principal + interest"},{"location":"examples/va_30/","title":"VA Loan Example (30-Year Fixed)","text":"<p>Example of a $350,000 VA loan amortized over 30 years at 5.99% APR, including VA funding fee.</p>"},{"location":"examples/va_30/#loan-parameters","title":"Loan Parameters","text":"<ul> <li>Type: VA</li> <li>Principal: $350,000</li> <li>Term: 360 months</li> <li>Rate: 5.99%</li> <li>VA Funding Fee: 2.25% (added to loan)</li> </ul>"},{"location":"examples/va_30/#cli-command","title":"CLI Command","text":"<pre><code>python -m cli.cli amortize \\\n  --type va \\\n  --balance 350000 \\\n  --rate 5.99 \\\n  --term 360\n</code></pre>"}]}